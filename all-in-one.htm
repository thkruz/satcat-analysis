<!doctype html>
<!-- saved from url=(0014)about:internet -->
<html>

<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <script>
    /*
    ==============================
    THIS IS THE FILESAVER LIBRARY.
    ==============================
    * FileSaver.js
    * A saveAs() FileSaver implementation.
    *
    * By Eli Grey, http://eligrey.com
    *
    * License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)
    * source  : http://purl.eligrey.com/github/FileSaver.js
    */
    var saveAs = saveAs || function (e) { "use strict"; if (typeof e === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) { return } var t = e.document, n = function () { return e.URL || e.webkitURL || e }, r = t.createElementNS("http://www.w3.org/1999/xhtml", "a"), o = "download" in r, a = function (e) { var t = new MouseEvent("click"); e.dispatchEvent(t) }, i = /constructor/i.test(e.HTMLElement) || e.safari, f = /CriOS\/[\d]+/.test(navigator.userAgent), u = function (t) { (e.setImmediate || e.setTimeout)(function () { throw t }, 0) }, s = "application/octet-stream", d = 1e3 * 40, c = function (e) { var t = function () { if (typeof e === "string") { n().revokeObjectURL(e) } else { e.remove() } }; setTimeout(t, d) }, l = function (e, t, n) { t = [].concat(t); var r = t.length; while (r--) { var o = e["on" + t[r]]; if (typeof o === "function") { try { o.call(e, n || e) } catch (a) { u(a) } } } }, p = function (e) { if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)) { return new Blob([String.fromCharCode(65279), e], { type: e.type }) } return e }, v = function (t, u, d) { if (!d) { t = p(t) } var v = this, w = t.type, m = w === s, y, h = function () { l(v, "writestart progress write writeend".split(" ")) }, S = function () { if ((f || m && i) && e.FileReader) { var r = new FileReader; r.onloadend = function () { var t = f ? r.result : r.result.replace(/^data:[^;]*;/, "data:attachment/file;"); var n = e.open(t, "_blank"); if (!n) e.location.href = t; t = undefined; v.readyState = v.DONE; h() }; r.readAsDataURL(t); v.readyState = v.INIT; return } if (!y) { y = n().createObjectURL(t) } if (m) { e.location.href = y } else { var o = e.open(y, "_blank"); if (!o) { e.location.href = y } } v.readyState = v.DONE; h(); c(y) }; v.readyState = v.INIT; if (o) { y = n().createObjectURL(t); setTimeout(function () { r.href = y; r.download = u; a(r); h(); c(y); v.readyState = v.DONE }); return } S() }, w = v.prototype, m = function (e, t, n) { return new v(e, t || e.name || "download", n) }; if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) { return function (e, t, n) { t = t || e.name || "download"; if (!n) { e = p(e) } return navigator.msSaveOrOpenBlob(e, t) } } w.abort = function () { }; w.readyState = w.INIT = 0; w.WRITING = 1; w.DONE = 2; w.error = w.onwritestart = w.onprogress = w.onwrite = w.onabort = w.onerror = w.onwriteend = null; return m }(typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content); if (typeof module !== "undefined" && module.exports) { module.exports.saveAs = saveAs } else if (typeof define !== "undefined" && define !== null && define.amd !== null) { define("FileSaver.js", function () { return saveAs }) }
  </script>
  <script>
    /*
    ==============================
    THIS IS THE SATELLITE.JS LIBRARY.
    ==============================
    */

    /*Copyright (C) 2013 Shashwat Kandadai, UCSC Jack Baskin School of Engineering
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/

    // Updated on 5/10/2020 to fix python to js porting bug.

    !function (t, o) { "function" == typeof define && define.amd ? define([], o) : t.satellite = o() }(this, function () { var t, o, s; return function (e) { var n, i, a, r, c = {}, d = {}, h = {}, p = {}, m = Object.prototype.hasOwnProperty, l = [].slice, u = /\.js$/; function f(t, o) { return m.call(t, o) } function g(t, o) { var s, e, n, i, a, r, c, d, p, m, l, f = o && o.split("/"), g = h.map, x = g && g["*"] || {}; if (t && "." === t.charAt(0)) if (o) { for (f = f.slice(0, f.length - 1), a = (t = t.split("/")).length - 1, h.nodeIdCompat && u.test(t[a]) && (t[a] = t[a].replace(u, "")), t = f.concat(t), p = 0; p < t.length; p += 1)if ("." === (l = t[p])) t.splice(p, 1), p -= 1; else if (".." === l) { if (1 === p && (".." === t[2] || ".." === t[0])) break; p > 0 && (t.splice(p - 1, 2), p -= 2) } t = t.join("/") } else 0 === t.indexOf("./") && (t = t.substring(2)); if ((f || x) && g) { for (p = (s = t.split("/")).length; p > 0; p -= 1) { if (e = s.slice(0, p).join("/"), f) for (m = f.length; m > 0; m -= 1)if ((n = g[f.slice(0, m).join("/")]) && (n = n[e])) { i = n, r = p; break } if (i) break; !c && x && x[e] && (c = x[e], d = p) } !i && c && (i = c, r = d), i && (s.splice(0, r, i), t = s.join("/")) } return t } function x(t, o) { return function () { return i.apply(e, l.call(arguments, 0).concat([t, o])) } } function M(t) { return function (o) { c[t] = o } } function z(t) { if (f(d, t)) { var o = d[t]; delete d[t], p[t] = !0, n.apply(e, o) } if (!f(c, t) && !f(p, t)) throw new Error("No " + t); return c[t] } function v(t) { var o, s = t ? t.indexOf("!") : -1; return s > -1 && (o = t.substring(0, s), t = t.substring(s + 1, t.length)), [o, t] } a = function (t, o) { var s, e = v(t), n = e[0]; return t = e[1], n && (s = z(n = g(n, o))), n ? t = s && s.normalize ? s.normalize(t, function (t) { return function (o) { return g(o, t) } }(o)) : g(t, o) : (n = (e = v(t = g(t, o)))[0], t = e[1], n && (s = z(n))), { f: n ? n + "!" + t : t, n: t, pr: n, p: s } }, r = { require: function (t) { return x(t) }, exports: function (t) { var o = c[t]; return void 0 !== o ? o : c[t] = {} }, module: function (t) { return { id: t, uri: "", exports: c[t], config: function (t) { return function () { return h && h.config && h.config[t] || {} } }(t) } } }, n = function (t, o, s, n) { var i, h, m, l, u, g, v = [], y = typeof s; if (n = n || t, "undefined" === y || "function" === y) { for (o = !o.length && s.length ? ["require", "exports", "module"] : o, u = 0; u < o.length; u += 1)if ("require" === (h = (l = a(o[u], n)).f)) v[u] = r.require(t); else if ("exports" === h) v[u] = r.exports(t), g = !0; else if ("module" === h) i = v[u] = r.module(t); else if (f(c, h) || f(d, h) || f(p, h)) v[u] = z(h); else { if (!l.p) throw new Error(t + " missing " + h); l.p.load(l.n, x(n, !0), M(h), {}), v[u] = c[h] } m = s ? s.apply(c[t], v) : void 0, t && (i && i.exports !== e && i.exports !== c[t] ? c[t] = i.exports : m === e && g || (c[t] = m)) } else t && (c[t] = s) }, t = o = i = function (t, o, s, c, d) { if ("string" == typeof t) return r[t] ? r[t](o) : z(a(t, o).f); if (!t.splice) { if ((h = t).deps && i(h.deps, h.callback), !o) return; o.splice ? (t = o, o = s, s = null) : t = e } return o = o || function () { }, "function" == typeof s && (s = c, c = d), c ? n(e, t, o, s) : setTimeout(function () { n(e, t, o, s) }, 4), i }, i.config = function (t) { return i(t) }, t._defined = c, (s = function (t, o, s) { o.splice || (s = o, o = []), f(c, t) || f(d, t) || (d[t] = [t, o, s]) }).amd = { jQuery: !0 } }(), s("almond", function () { }), s("constants", [], function () { "use strict"; var t = Math.PI, o = 60 / Math.sqrt(650944.0944816993), s = .00108262998905, e = -253215306e-14; return { pi: t, twoPi: 2 * t, deg2rad: t / 180, rad2deg: 180 / t, minutesPerDay: 1440, mu: 398600.5, earthRadius: 6378.137, xke: o, tumin: 1 / o, j2: s, j3: e, j4: -161098761e-14, j3oj2: e / s, x2o3: 2 / 3, vkmpersec: 6378.137 * o / 60, temp4: 1.5e-12 } }), s("coordinate-transforms/degrees-lat", ["../constants"], function (t) { "use strict"; return function (o) { if (o > t.pi / 2 || o < -t.pi / 2) return "Err"; var s = o / t.pi * 180; return s = s } }), s("coordinate-transforms/degrees-long", ["../constants"], function (t) { "use strict"; return function (o) { var s = o / t.pi * 180 % 360; return s > 180 ? s = 360 - s : s < -180 && (s = 360 + s), s } }), s("coordinate-transforms/ecf-to-eci", [], function () { "use strict"; return function (t, o) { return { x: t.x * Math.cos(o) - t.y * Math.sin(o), y: t.x * Math.sin(o) + t.y * Math.cos(o), z: t.z } } }), s("coordinate-transforms/geodetic-to-ecf", [], function () { "use strict"; return function (t) { var o = t.longitude, s = t.latitude, e = t.height, n = 6378.137, i = (n - 6356.7523142) / n, a = 2 * i - i * i, r = n / Math.sqrt(1 - a * (Math.sin(s) * Math.sin(s))); return { x: (r + e) * Math.cos(s) * Math.cos(o), y: (r + e) * Math.cos(s) * Math.sin(o), z: (r * (1 - a) + e) * Math.sin(s) } } }), s("coordinate-transforms/topocentric", ["./geodetic-to-ecf"], function (t) { "use strict"; return function (o, s) { var e = o.longitude, n = o.latitude, i = t(o), a = s.x - i.x, r = s.y - i.y, c = s.z - i.z; return { topS: Math.sin(n) * Math.cos(e) * a + Math.sin(n) * Math.sin(e) * r - Math.cos(n) * c, topE: -Math.sin(e) * a + Math.cos(e) * r, topZ: Math.cos(n) * Math.cos(e) * a + Math.cos(n) * Math.sin(e) * r + Math.sin(n) * c } } }), s("coordinate-transforms/topocentric-to-look-angles", ["../constants"], function (t) { "use strict"; return function (o) { var s = o.topS, e = o.topE, n = o.topZ, i = Math.sqrt(s * s + e * e + n * n), a = Math.asin(n / i); return { azimuth: Math.atan2(-e, s) + t.pi, elevation: a, rangeSat: i } } }), s("coordinate-transforms/ecf-to-look-angles", ["./topocentric", "./topocentric-to-look-angles"], function (t, o) { "use strict"; return function (s, e) { var n = t(s, e); return o(n) } }), s("coordinate-transforms/eci-to-ecf", [], function () { "use strict"; return function (t, o) { return { x: t.x * Math.cos(o) + t.y * Math.sin(o), y: t.x * -Math.sin(o) + t.y * Math.cos(o), z: t.z } } }), s("coordinate-transforms/eci-to-geodetic", [], function () { "use strict"; return function (t, o) { for (var s, e = 6378.137, n = Math.sqrt(t.x * t.x + t.y * t.y), i = (e - 6356.7523142) / e, a = 2 * i - i * i, r = Math.atan2(t.y, t.x) - o, c = 0, d = Math.atan2(t.z, Math.sqrt(t.x * t.x + t.y * t.y)); c < 20;)s = 1 / Math.sqrt(1 - a * (Math.sin(d) * Math.sin(d))), d = Math.atan2(t.z + e * s * a * Math.sin(d), n), c += 1; return { longitude: r, latitude: d, height: n / Math.cos(d) - e * s } } }), s("doppler-factor", [], function () { "use strict"; return function (t, o, s) { var e = Math.sqrt(Math.pow(o.x - t.x, 2) + Math.pow(o.y - t.y, 2) + Math.pow(o.z - t.z, 2)), n = o.x + s.x, i = o.y + s.y, a = o.z + s.z, r = Math.sqrt(Math.pow(n - t.x, 2) + Math.pow(i - t.y, 2) + Math.pow(a - t.z, 2)) - e; return 1 + (r *= r >= 0 ? 1 : -1) / 299792.458 } }), s("gstime/days2mdhms", [], function () { "use strict"; return function (t, o) { var s = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], e = Math.floor(o); t % 4 == 0 && (s = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]); for (var n = 1, i = 0; e > i + s[n - 1] && n < 12;)i += s[n - 1], n += 1; var a = n, r = e - i, c = 24 * (o - e), d = Math.floor(c); c = 60 * (c - d); var h = Math.floor(c); return { mon: a, day: r, hr: d, minute: h, sec: 60 * (c - h) } } }), s("gstime/gstime", ["../constants"], function (t) { "use strict"; return function (o) { var s = (o - 2451545) / 36525, e = -62e-7 * s * s * s + .093104 * s * s + 3164400184.812866 * s + 67310.54841; return (e = e * t.deg2rad / 240 % t.twoPi) < 0 && (e += t.twoPi), e } }), s("gstime/jday", [], function () { "use strict"; return function (t, o, s, e, n, i) { if (t instanceof Date) { var a = t; t = a.getUTCFullYear(), o = a.getUTCMonth() + 1, s = a.getUTCDate(), e = a.getUTCHours(), n = a.getUTCMinutes(), i = a.getUTCSeconds() } return 367 * t - Math.floor(7 * (t + Math.floor((o + 9) / 12)) * .25) + Math.floor(275 * o / 9) + s + 1721013.5 + ((i / 60 + n) / 60 + e) / 24 } }), s("dpper", ["./constants"], function (t) { "use strict"; return function (o, s) { var e, n, i, a, r, c, d, h, p, m, l, u, f, g, x, M, z, v, y, w, b, j, q, P = s.init, k = s.ep, F = s.inclp, T = s.nodep, E = s.argpp, R = s.mp, C = s.opsmode, I = o.e3, U = o.ee2, D = o.peo, O = o.pgho, S = o.pho, A = o.pinco, L = o.plo, Z = o.se2, G = o.se3, H = o.sgh2, N = o.sgh3, Q = o.sgh4, Y = o.sh2, $ = o.sh3, _ = o.si2, B = o.si3, J = o.sl2, K = o.sl3, V = o.sl4, W = o.t, X = o.xgh2, tt = o.xgh3, ot = o.xgh4, st = o.xh2, et = o.xh3, nt = o.xi2, it = o.xi3, at = o.xl2, rt = o.xl3, ct = o.xl4, dt = o.zmol, ht = o.zmos; return q = ht + 119459e-10 * W, "y" === P && (q = ht), j = q + .0335 * Math.sin(q), g = Z * (d = .5 * (z = Math.sin(j)) * z - .25) + G * (h = -.5 * z * Math.cos(j)), v = _ * d + B * h, y = J * d + K * h + V * z, x = H * d + N * h + Q * z, M = Y * d + $ * h, q = dt + .00015835218 * W, "y" === P && (q = dt), j = q + .1098 * Math.sin(q), p = g + (U * (d = .5 * (z = Math.sin(j)) * z - .25) + I * (h = -.5 * z * Math.cos(j))), u = v + (nt * d + it * h), f = y + (at * d + rt * h + ct * z), m = x + (X * d + tt * h + ot * z), l = M + (st * d + et * h), "n" === P && (f -= L, m -= O, l -= S, F += u -= A, k += p -= D, a = Math.sin(F), i = Math.cos(F), F >= .2 ? (E += m -= i * (l /= a), T += l, R += f) : (e = a * (c = Math.sin(T)), n = a * (r = Math.cos(T)), e += l * r + u * i * c, n += -l * c + u * i * r, (T %= t.twoPi) < 0 && "a" === C && (T += t.twoPi), w = R + E + i * T, w += f + m - u * T * a, b = T, (T = Math.atan2(e, n)) < 0 && "a" === C && (T += t.twoPi), Math.abs(b - T) > t.pi && (T < b ? T += t.twoPi : T -= t.twoPi), E = w - (R += f) - i * T)), { ep: k, inclp: F, nodep: T, argpp: E, mp: R } } }), s("dspace", ["./constants"], function (t) { "use strict"; return function (o) { var s, e, n, i, a, r, c, d, h, p, m = o.irez, l = o.d2201, u = o.d2211, f = o.d3210, g = o.d3222, x = o.d4410, M = o.d4422, z = o.d5220, v = o.d5232, y = o.d5421, w = o.d5433, b = o.dedt, j = o.del1, q = o.del2, P = o.del3, k = o.didt, F = o.dmdt, T = o.dnodt, E = o.domdt, R = o.argpo, C = o.argpdot, I = o.t, U = o.tc, D = o.gsto, O = o.xfact, S = o.xlamo, A = o.no, L = o.atime, Z = o.em, G = o.argpm, H = o.inclm, N = o.xli, Q = o.mm, Y = o.xni, $ = o.nodem, _ = o.nm, B = 5.7686396, J = .95240898, K = 1.8014998, V = 1.050833, W = 4.4108898, X = 0; if (n = (D + .0043752690880113 * U) % t.twoPi, Z += b * I, H += k * I, G += E * I, $ += T * I, Q += F * I, e = 0, 0 !== m) { (0 === L || I * L <= 0 || Math.abs(I) < Math.abs(L)) && (L = 0, Y = A, N = S), s = I > 0 ? 720 : -720; for (var tt = 381; 381 === tt;)2 !== m ? (h = j * Math.sin(N - .13130908) + q * Math.sin(2 * (N - 2.8843198)) + P * Math.sin(3 * (N - .37448087)), c = Y + O, d = j * Math.cos(N - .13130908) + 2 * q * Math.cos(2 * (N - 2.8843198)) + 3 * P * Math.cos(3 * (N - .37448087)), d *= c) : (a = (p = R + C * L) + p, i = N + N, h = l * Math.sin(a + N - B) + u * Math.sin(N - B) + f * Math.sin(p + N - J) + g * Math.sin(-p + N - J) + x * Math.sin(a + i - K) + M * Math.sin(i - K) + z * Math.sin(p + N - V) + v * Math.sin(-p + N - V) + y * Math.sin(p + i - W) + w * Math.sin(-p + i - W), c = Y + O, d = l * Math.cos(a + N - B) + u * Math.cos(N - B) + f * Math.cos(p + N - J) + g * Math.cos(-p + N - J) + z * Math.cos(p + N - V) + v * Math.cos(-p + N - V) + 2 * (x * Math.cos(a + i - K) + M * Math.cos(i - K) + y * Math.cos(p + i - W) + w * Math.cos(-p + i - W)), d *= c), Math.abs(I - L) >= 720 ? (0, tt = 381) : (e = I - L, tt = 0), 381 === tt && (N = N + c * s + 259200 * h, Y = Y + h * s + 259200 * d, L += s); _ = Y + h * e + d * e * e * .5, r = N + c * e + h * e * e * .5, 1 !== m ? (Q = r - 2 * $ + 2 * n, X = _ - A) : (Q = r - $ - G + n, X = _ - A), _ = A + X } return { atime: L, em: Z, argpm: G, inclm: H, xli: N, mm: Q, xni: Y, nodem: $, dndt: X, nm: _ } } }), s("sgp4", ["./constants", "./dpper", "./dspace"], function (t, o, s) { "use strict"; return function (e, n) { var i, a, r, c, d, h, p, m, l, u, f, g, x, M, z, v, y, w, b, j, q, P, k, F, T, E, R, C, I, U, D, O, S, A, L, Z, G, H, N, Q, Y, $, _, B, J, K, V, W, X, tt, ot, st, et, nt, it, at, rt, ct, dt, ht, pt, mt, lt, ut, ft, gt, xt = 0; e.t = n, pt = e.mo + e.mdot * e.t; var Mt = e.argpo + e.argpdot * e.t; if (ut = e.nodeo + e.nodedot * e.t, T = Mt, nt = pt, L = e.t * e.t, at = ut + e.nodecf * L, _ = 1 - e.cc1 * e.t, B = e.bstar * e.cc4 * e.t, J = e.t2cof * L, 1 !== e.isimp) { j = e.omgcof * e.t; var zt = 1 + e.eta * Math.cos(pt); nt = pt + (Q = j + e.xmcof * (zt * zt * zt - e.delmo)), T = Mt - Q, G = (Z = L * e.t) * e.t, _ = _ - e.d2 * L - e.d3 * Z - e.d4 * G, B += e.bstar * e.cc5 * (Math.sin(nt) - e.sinmao), J = J + e.t3cof * Z + G * (e.t4cof + e.t * e.t5cof) } it = e.no; var vt = e.ecco; if (et = e.inclo, "d" === e.method) { H = e.t; var yt = { irez: e.irez, d2201: e.d2201, d2211: e.d2211, d3210: e.d3210, d3222: e.d3222, d4410: e.d4410, d4422: e.d4422, d5220: e.d5220, d5232: e.d5232, d5421: e.d5421, d5433: e.d5433, dedt: e.dedt, del1: e.del1, del2: e.del2, del3: e.del3, didt: e.didt, dmdt: e.dmdt, dnodt: e.dnodt, domdt: e.domdt, argpo: e.argpo, argpdot: e.argpdot, t: e.t, tc: H, gsto: e.gsto, xfact: e.xfact, xlamo: e.xlamo, no: e.no, atime: e.atime, em: vt, argpm: T, inclm: et, xli: e.xli, mm: nt, xni: e.xni, nodem: at, nm: it }, wt = s(yt); vt = wt.em, T = wt.argpm, et = wt.inclm, nt = wt.mm, at = wt.nodem, wt.dndt, it = wt.nm } if (it <= 0) return [!1, !1]; if (i = Math.pow(t.xke / it, t.x2o3) * _ * _, it = t.xke / Math.pow(i, 1.5), (vt -= B) >= 1 || vt < -.001) return [!1, !1]; vt < 1e-6 && (vt = 1e-6), dt = (nt += e.no * J) + T + at, Q = 1 - vt * vt, at %= t.twoPi; var bt = vt; if (ct = et, E = T %= t.twoPi, gt = at, ht = nt = ((dt %= t.twoPi) - T - at) % t.twoPi, M = Math.sin(et), x = Math.cos(et), "d" === e.method) { var jt = { inclo: e.inclo, init: "n", ep: bt, inclp: ct, nodep: gt, argpp: E, mp: ht, opsmode: e.operationmod }, qt = o(e, jt); if (bt = qt.ep, ct = qt.inclp, gt = qt.nodep, E = qt.argpp, ht = qt.mp, ct < 0 && (ct = -ct, gt += t.pi, E -= t.pi), bt < 0 || bt > 1) return [!1, !1] } "d" === e.method && (M = Math.sin(ct), x = Math.cos(ct), e.aycof = -.5 * t.j3oj2 * M, Math.abs(x + 1) > 1.5e-12 ? e.xlcof = -.25 * t.j3oj2 * M * (3 + 5 * x) / (1 + x) : e.xlcof = -.25 * t.j3oj2 * M * (3 + 5 * x) / t.temp4), a = bt * Math.cos(E), Q = 1 / (i * (1 - bt * bt)), r = bt * Math.sin(E) + Q * e.aycof, k = K = (ht + E + gt + Q * e.xlcof * a - gt) % t.twoPi, N = 9999.9; for (var Pt = 1; Math.abs(N) >= 1e-12 && Pt <= 10;)u = Math.sin(k), (N = (K - r * (l = Math.cos(k)) + a * u - k) / (N = 1 - l * a - u * r)) > .95 ? N = .95 : N < -.95 && (N = -.95), k += N, Pt += 1; if (q = a * l + r * u, F = a * u - r * l, (R = i * (1 - (P = a * a + r * r))) < 0) return [!1, !1]; D = i * (1 - q), U = Math.sqrt(i) * F / D, S = Math.sqrt(R) / D, b = i / D * (u - r - a * (Q = F / (1 + (c = Math.sqrt(1 - P))))), w = i / D * (l - a + r * Q), A = Math.atan2(b, w), m = (w + w) * b, p = 1 - 2 * b * b, Q = 1 / R, $ = (Y = .5 * t.j2 * Q) * Q, "d" === e.method && (z = x * x, e.con41 = 3 * z - 1, e.x1mth2 = 1 - z, e.x7thm1 = 7 * z - 1), xt = D * (1 - 1.5 * $ * c * e.con41) + .5 * Y * e.x1mth2 * p, A -= .25 * $ * e.x7thm1 * m, ft = gt + 1.5 * $ * x * m, rt = ct + 1.5 * $ * x * M * p; var kt = U - it * Y * e.x1mth2 * m / t.xke; return O = S + it * Y * (e.x1mth2 * p + 1.5 * e.con41) / t.xke, y = Math.sin(A), v = Math.cos(A), h = Math.sin(ft), d = Math.cos(ft), g = Math.sin(rt), W = (lt = d * (f = Math.cos(rt))) * y + h * v, X = g * y, tt = (mt = -h * f) * v - d * y, ot = lt * v - h * y, st = g * v, (C = { x: 0, y: 0, z: 0 }).x = xt * (V = mt * y + d * v) * t.earthRadius, C.y = xt * W * t.earthRadius, C.z = xt * X * t.earthRadius, (I = { x: 0, y: 0, z: 0 }).x = (kt * V + O * tt) * t.vkmpersec, I.y = (kt * W + O * ot) * t.vkmpersec, I.z = (kt * X + O * st) * t.vkmpersec, xt < 1 ? { position: !1, velocity: !1 } : { position: C, velocity: I } } }), s("propagate/propagate", ["../constants", "../gstime/jday", "../sgp4"], function (t, o, s) { "use strict"; return function () { var e = arguments[0], n = Array.prototype.slice.call(arguments, 1), i = (o.apply(null, n) - e.jdsatepoch) * t.minutesPerDay; return s(e, i) } }), s("dscom", ["./constants"], function (t) { "use strict"; return function (o) { var s, e, n, i, a, r, c, d, h, p, m, l, u, f, g, x, M, z, v, y, w, b, j, q, P, k, F, T, E, R, C, I, U, D, O, S, A, L, Z, G, H, N, Q, Y, $, _, B, J, K, V, W, X, tt, ot, st, et, nt, it, at, rt, ct, dt, ht, pt, mt, lt, ut, ft, gt, xt, Mt, zt, vt, yt, wt, bt, jt = o.epoch, qt = o.ep, Pt = o.argpp, kt = o.tc, Ft = o.inclp, Tt = o.nodep, Et = o.np, Rt = (o.e3, o.ee2, o.peo, o.pgho, o.pho, o.pinco, o.plo, o.se2, o.se3, o.sgh2, o.sgh3, o.sgh4, o.sh2, o.sh3, o.si2, o.si3, o.sl2, o.sl3, o.sl4, o.xgh2, o.xgh3, o.xgh4, o.xh2, o.xh3, o.xi2, o.xi3, o.xl2, o.xl3, o.xl4, o.zmol), Ct = o.zmos, It = Et, Ut = qt, Dt = Math.sin(Tt), Ot = Math.cos(Tt), St = Math.sin(Pt), At = Math.cos(Pt), Lt = Math.sin(Ft), Zt = Math.cos(Ft), Gt = Ut * Ut; m = 1 - Gt; var Ht = Math.sqrt(m); var Nt = jt + 18261.5 + kt / 1440; j = (4.523602 - .00092422029 * Nt) % t.twoPi, f = Math.sin(j), O = .91375164 - .03568096 * (u = Math.cos(j)), I = .089683511 * f / (S = Math.sqrt(1 - O * O)); var Qt = 5.8351514 + .001944368 * Nt; A = .39785416 * f / S, L = (C = Math.sqrt(1 - I * I)) * u + .91744867 * I * f, A = Qt + (A = Math.atan2(A, L)) - j, F = Math.cos(A), T = Math.sin(A), P = .1945905, k = -.98088458, U = .91744867, D = .39785416, E = Ot, R = Dt, l = 29864797e-13, q = 1 / It; for (var Yt = 0; Yt < 2;)ft = -6 * (s = P * E + k * U * R) * (a = -Lt * (c = -P * R + k * U * E) + Zt * (d = k * D)) + Gt * (-24 * (g = s * At + (e = Zt * c + Lt * d) * St) * (w = a * At) - 6 * (M = -s * St + e * At) * (v = a * St)), gt = -6 * (s * (r = -Lt * (h = k * R + P * U * E) + Zt * (p = P * D)) + (n = -k * E + P * U * R) * a) + Gt * (-24 * ((x = n * At + (i = Zt * h + Lt * p) * St) * w + g * (b = r * At)) + -6 * (M * (y = r * St) + (z = -n * St + i * At) * v)), xt = -6 * n * r + Gt * (-24 * x * b - 6 * z * y), Mt = 6 * e * a + Gt * (24 * g * v - 6 * M * w), zt = 6 * (i * a + e * r) + Gt * (24 * (x * v + g * y) - 6 * (z * w + M * b)), vt = 6 * i * r + Gt * (24 * x * y - 6 * z * b), mt = (mt = 3 * (s * s + e * e) + (yt = 12 * g * g - 3 * M * M) * Gt) + mt + m * yt, lt = (lt = 6 * (s * n + e * i) + (wt = 24 * g * x - 6 * M * z) * Gt) + lt + m * wt, ut = (ut = 3 * (n * n + i * i) + (bt = 12 * x * x - 3 * z * z) * Gt) + ut + m * bt, at = -.5 * (rt = l * q) / Ht, it = -15 * Ut * (ct = rt * Ht), dt = g * M + x * z, ht = x * M + g * z, pt = x * z - g * M, 1 === (Yt += 1) && (Z = it, G = at, H = rt, N = ct, Q = dt, Y = ht, $ = pt, _ = mt, B = lt, J = ut, K = ft, V = gt, W = xt, X = Mt, tt = zt, ot = vt, st = yt, et = wt, nt = bt, P = F, k = T, U = O, D = S, E = C * Ot + I * Dt, R = Dt * C - Ot * I, l = 4.7968065e-7); return Rt = (4.7199672 + .2299715 * Nt - Qt) % t.twoPi, Ct = (6.2565837 + .017201977 * Nt) % t.twoPi, { snodm: Dt, cnodm: Ot, sinim: Lt, cosim: Zt, sinomm: St, cosomm: At, day: Nt, e3: 2 * it * pt, ee2: 2 * it * ht, em: Ut, emsq: Gt, gam: Qt, peo: 0, pgho: 0, pho: 0, pinco: 0, plo: 0, rtemsq: Ht, se2: 2 * Z * Y, se3: 2 * Z * $, sgh2: 2 * N * et, sgh3: 2 * N * (nt - st), sgh4: -18 * N * .01675, sh2: -2 * G * tt, sh3: -2 * G * (ot - X), si2: 2 * G * V, si3: 2 * G * (W - K), sl2: -2 * H * B, sl3: -2 * H * (J - _), sl4: -2 * H * (-21 - 9 * Gt) * .01675, s1: it, s2: at, s3: rt, s4: ct, s5: dt, s6: ht, s7: pt, ss1: Z, ss2: G, ss3: H, ss4: N, ss5: Q, ss6: Y, ss7: $, sz1: _, sz2: B, sz3: J, sz11: K, sz12: V, sz13: W, sz21: X, sz22: tt, sz23: ot, sz31: st, sz32: et, sz33: nt, xgh2: 2 * ct * wt, xgh3: 2 * ct * (bt - yt), xgh4: -18 * ct * .0549, xh2: -2 * at * zt, xh3: -2 * at * (vt - Mt), xi2: 2 * at * gt, xi3: 2 * at * (xt - ft), xl2: -2 * rt * lt, xl3: -2 * rt * (ut - mt), xl4: -2 * rt * (-21 - 9 * Gt) * .0549, nm: It, z1: mt, z2: lt, z3: ut, z11: ft, z12: gt, z13: xt, z21: Mt, z22: zt, z23: vt, z31: yt, z32: wt, z33: bt, zmol: Rt, zmos: Ct } } }), s("dsinit", ["./constants"], function (t) { "use strict"; return function (o) { var s, e, n, i, a, r, c, d, h, p, m, l, u, f, g, x, M, z, v = o.cosim, y = o.emsq, w = o.argpo, b = o.s1, j = o.s2, q = o.s3, P = o.s4, k = o.s5, F = o.sinim, T = o.ss1, E = o.ss2, R = o.ss3, C = o.ss4, I = o.ss5, U = o.sz1, D = o.sz3, O = o.sz11, S = o.sz13, A = o.sz21, L = o.sz23, Z = o.sz31, G = o.sz33, H = o.t, N = o.tc, Q = o.gsto, Y = o.mo, $ = o.mdot, _ = o.no, B = o.nodeo, J = o.nodedot, K = o.xpidot, V = o.z1, W = o.z3, X = o.z11, tt = o.z13, ot = o.z21, st = o.z23, et = o.z31, nt = o.z33, it = o.ecco, at = o.eccsq, rt = o.em, ct = o.argpm, dt = o.inclm, ht = o.mm, pt = o.nm, mt = o.nodem, lt = o.irez, ut = o.atime, ft = o.d2201, gt = o.d2211, xt = o.d3210, Mt = o.d3222, zt = o.d4410, vt = o.d4422, yt = o.d5220, wt = o.d5232, bt = o.d5421, jt = o.d5433, qt = o.dedt, Pt = o.didt, kt = o.dmdt, Ft = o.dnodt, Tt = o.domdt, Et = o.del1, Rt = o.del2, Ct = o.del3, It = o.xfact, Ut = o.xlamo, Dt = o.xli, Ot = o.xni, St = .0043752690880113, At = .00015835218, Lt = 119459e-10; lt = 0, .0034906585 < pt < .0052359877 && (lt = 1), .00826 <= pt <= .00924 && rt >= .5 && (lt = 2); var Zt = T * Lt * I, Gt = E * Lt * (O + S), Ht = -Lt * R * (U + D - 14 - 6 * y), Nt = C * Lt * (Z + G - 6), Qt = -Lt * E * (A + L); (dt < .052359877 || dt > t.pi - .052359877) && (Qt = 0), 0 !== F && (Qt /= F); var Yt = Nt - v * Qt; qt = Zt + b * At * k, Pt = Gt + j * At * (X + tt), kt = Ht - At * q * (V + W - 14 - 6 * y); var $t = P * At * (et + nt - 6), _t = -At * j * (ot + st); (dt < .052359877 || dt > t.pi - .052359877) && (_t = 0), Tt = Yt + $t, Ft = Qt, 0 !== F && (Tt -= v / F * _t, Ft += _t / F); if (g = (Q + N * St) % t.twoPi, rt += qt * H, dt += Pt * H, ct += Tt * H, mt += Ft * H, ht += kt * H, 0 !== lt) { if (x = Math.pow(pt / t.xke, 2 / 3), 2 === lt) { M = v * v; var Bt = rt, Jt = y; z = (rt = it) * (y = at), rt <= .65 ? (n = 3.616 - 13.247 * rt + 16.29 * y, i = 117.39 * rt - 19.302 - 228.419 * y + 156.591 * z, a = 109.7927 * rt - 18.9068 - 214.6334 * y + 146.5816 * z, r = 242.694 * rt - 41.122 - 471.094 * y + 313.953 * z, c = 841.88 * rt - 146.407 - 1629.014 * y + 1083.435 * z, d = 3017.977 * rt - 532.114 - 5740.032 * y + 3708.276 * z) : (n = 331.819 * rt - 72.099 - 508.738 * y + 266.724 * z, i = 1582.851 * rt - 346.844 - 2415.925 * y + 1246.113 * z, a = 1554.908 * rt - 342.585 - 2366.899 * y + 1215.972 * z, r = 4758.686 * rt - 1052.797 - 7193.992 * y + 3651.957 * z, c = 16178.11 * rt - 3581.69 - 24462.77 * y + 12422.52 * z, d = rt > .715 ? 29936.92 * rt - 5149.66 - 54087.36 * y + 31324.56 * z : 1464.74 - 4664.75 * rt + 3763.64 * y), rt < .7 ? (m = 4988.61 * rt - 919.2277 - 9064.77 * y + 5542.21 * z, h = 4568.6173 * rt - 822.71072 - 8491.4146 * y + 5337.524 * z, p = 4690.25 * rt - 853.666 - 8624.77 * y + 5341.4 * z) : (m = 161616.52 * rt - 37995.78 - 229838.2 * y + 109377.94 * z, h = 218913.95 * rt - 51752.104 - 309468.16 * y + 146349.42 * z, p = 170470.89 * rt - 40023.88 - 242699.48 * y + 115605.82 * z), ft = (u = 17891679e-13 * (f = 3 * (pt * pt) * (x * x))) * (s = .75 * (1 + 2 * v + M)) * (-.306 - .44 * (rt - .64)), gt = u * (1.5 * (l = F * F)) * n, xt = (u = 3.7393792e-7 * (f *= x)) * (1.875 * F * (1 - 2 * v - 3 * M)) * i, Mt = u * (-1.875 * F * (1 + 2 * v - 3 * M)) * a, zt = (u = 2 * (f *= x) * 7.3636953e-9) * (35 * l * s) * r, vt = u * (39.375 * l * l) * c, yt = (u = 1.1428639e-7 * (f *= x)) * (9.84375 * F * (l * (1 - 2 * v - 5 * M) + .33333333 * (4 * v - 2 + 6 * M))) * d, wt = u * (F * (4.92187512 * l * (-2 - 4 * v + 10 * M) + 6.56250012 * (1 + 2 * v - 3 * M))) * p, bt = (u = 2 * f * 2.1765803e-9) * (29.53125 * F * (2 - 8 * v + M * (8 * v - 12 + 10 * M))) * h, jt = u * (29.53125 * F * (-2 - 8 * v + M * (12 + 8 * v - 10 * M))) * m, Ut = (Y + B + B - g - g) % t.twoPi, It = $ + kt + 2 * (J + Ft - St) - _, rt = Bt, y = Jt } 1 === lt && (e = 1 + v, Rt = 2 * (Et = 3 * pt * pt * x * x) * (s = .75 * (1 + v) * (1 + v)) * (1 + y * (.8125 * y - 2.5)) * 17891679e-13, Ct = 3 * Et * (e *= 1.875 * e * e) * (1 + y * (6.60937 * y - 6)) * 2.2123015e-7 * x, Et = Et * (.9375 * F * F * (1 + 3 * v) - .75 * (1 + v)) * (i = 1 + 2 * y) * 21460748e-13 * x, Ut = (Y + B + w - g) % t.twoPi, It = $ + K - St + kt + Tt + Ft - _), Dt = Ut, Ot = _, ut = 0, pt = _ + 0 } return { em: rt, argpm: ct, inclm: dt, mm: ht, nm: pt, nodem: mt, irez: lt, atime: ut, d2201: ft, d2211: gt, d3210: xt, d3222: Mt, d4410: zt, d4422: vt, d5220: yt, d5232: wt, d5421: bt, d5433: jt, dedt: qt, didt: Pt, dmdt: kt, dndt: 0, dnodt: Ft, domdt: Tt, del1: Et, del2: Rt, del3: Ct, xfact: It, xlamo: Ut, xli: Dt, xni: Ot } } }), s("initl", ["./constants", "./gstime/gstime"], function (t, o) { "use strict"; return function (s) { var e, n, i, a, r, c = s.ecco, d = s.epoch, h = s.inclo, p = s.no, m = (s.method, s.opsmode), l = c * c, u = 1 - l, f = Math.sqrt(u), g = Math.cos(h), x = g * g; e = Math.pow(t.xke / p, t.x2o3); var M = (n = .75 * t.j2 * (3 * x - 1) / (f * u)) / (e * e); p /= 1 + (M = n / ((i = e * (1 - M * M - M * (1 / 3 + 134 * M * M / 81))) * i)); var z = Math.pow(t.xke / p, t.x2o3), v = Math.sin(h), y = 1 - 5 * x, w = -y - x - x, b = 1 / z, j = (a = z * u) * a, q = z * (1 - c); if ("n", "a" === m) { var P = d - 7305, k = Math.floor(P + 1e-8), F = P - k, T = .017202791694070362; (r = (1.7321343856509375 + T * k + (T + t.twoPi) * F + P * P * 5.075514194322695e-15) % t.twoPi) < 0 && (r += t.twoPi) } else r = o(d + 2433281.5); return { no: p, method: "n", ainv: b, ao: z, con41: w, con42: y, cosio: g, cosio2: x, eccsq: l, omeosq: u, posq: j, rp: q, rteosq: f, sinio: v, gsto: r } } }), s("sgp4init", ["./constants", "./dpper", "./dscom", "./dsinit", "./initl", "./sgp4"], function (t, o, s, e, n, i) { "use strict"; return function (a, r) { var c, d, h, p, m, l, u, f, g, x, M, z, v, y, w, b, j, q, P, k, F, T, E, R, C, I, U, D, O, S, A, L, Z, G, H, N, Q, Y, $, _, B, J, K, V, W, X, tt, ot, st, et, nt, it, at, rt, ct, dt, ht = r.opsmode, pt = r.satn, mt = r.epoch, lt = r.xbstar, ut = r.xecco, ft = r.xargpo, gt = r.xinclo, xt = r.xmo, Mt = r.xno, zt = r.xnodeo; a.isimp = 0, a.method = "n", a.aycof = 0, a.con41 = 0, a.cc1 = 0, a.cc4 = 0, a.cc5 = 0, a.d2 = 0, a.d3 = 0, a.d4 = 0, a.delmo = 0, a.eta = 0, a.argpdot = 0, a.omgcof = 0, a.sinmao = 0, a.t = 0, a.t2cof = 0, a.t3cof = 0, a.t4cof = 0, a.t5cof = 0, a.x1mth2 = 0, a.x7thm1 = 0, a.mdot = 0, a.nodedot = 0, a.xlcof = 0, a.xmcof = 0, a.nodecf = 0, a.bstar = lt, a.ecco = ut, a.argpo = ft, a.inclo = gt, a.mo = xt, a.no = Mt, a.nodeo = zt, a.operationmode = ht; var vt = 78 / t.earthRadius + 1, yt = 42 / t.earthRadius, wt = yt * yt * yt * yt; a.init = "y", a.t = 0; var bt = { satn: pt, ecco: a.ecco, epoch: mt, inclo: a.inclo, no: a.no, method: a.method, opsmode: a.operationmode }, jt = n(bt); a.no = jt.no; var qt = jt.ao; a.con41 = jt.con41; var Pt = jt.con42, kt = jt.cosio, Ft = jt.cosio2, Tt = jt.eccsq, Et = jt.omeosq, Rt = jt.posq, Ct = jt.rp, It = jt.rteosq, Ut = jt.sinio; if (a.gsto = jt.gsto, Et >= 0 || a.no >= 0) { if (a.isimp = 0, Ct < 220 / t.earthRadius + 1 && (a.isimp = 1), U = vt, F = wt, (q = (Ct - 1) * t.earthRadius) < 156) { U = q - 78, q < 98 && (U = 20); var Dt = (120 - U) / t.earthRadius; F = Dt * Dt * Dt * Dt, U = U / t.earthRadius + 1 } P = 1 / Rt, X = 1 / (qt - U), a.eta = qt * a.ecco * X, z = a.eta * a.eta, M = a.ecco * a.eta, k = Math.abs(1 - z), p = (u = (l = F * Math.pow(X, 4)) / Math.pow(k, 3.5)) * a.no * (qt * (1 + 1.5 * z + M * (4 + z)) + .375 * t.j2 * X / k * a.con41 * (8 + 3 * z * (8 + z))), a.cc1 = a.bstar * p, m = 0, a.ecco > 1e-4 && (m = -2 * l * X * t.j3oj2 * a.no * Ut / a.ecco), a.x1mth2 = 1 - Ft, a.cc4 = 2 * a.no * u * qt * Et * (a.eta * (2 + .5 * z) + a.ecco * (.5 + 2 * z) - t.j2 * X / (qt * k) * (-3 * a.con41 * (1 - 2 * M + z * (1.5 - .5 * M)) + .75 * a.x1mth2 * (2 * z - M * (1 + z)) * Math.cos(2 * a.argpo))), a.cc5 = 2 * u * qt * Et * (1 + 2.75 * (z + M) + M * z), f = Ft * Ft, V = .5 * (K = 1.5 * t.j2 * P * a.no) * t.j2 * P, W = -.46875 * t.j4 * P * P * a.no, a.mdot = a.no + .5 * K * It * a.con41 + .0625 * V * It * (13 - 78 * Ft + 137 * f), a.argpdot = -.5 * K * Pt + .0625 * V * (7 - 114 * Ft + 395 * f) + W * (3 - 36 * Ft + 49 * f), ot = -K * kt, a.nodedot = ot + (.5 * V * (4 - 19 * Ft) + 2 * W * (3 - 7 * Ft)) * kt, tt = a.argpdot + a.nodedot, a.omgcof = a.bstar * m * Math.cos(a.argpo), a.xmcof = 0, a.ecco > 1e-4 && (a.xmcof = -2 / 3 * l * a.bstar / M), a.nodecf = 3.5 * Et * ot * a.cc1, a.t2cof = 1.5 * a.cc1, Math.abs(kt + 1) > 1.5e-12 ? a.xlcof = -.25 * t.j3oj2 * Ut * (3 + 5 * kt) / (1 + kt) : a.xlcof = -.25 * t.j3oj2 * Ut * (3 + 5 * kt) / t.temp4, a.aycof = -.5 * t.j3oj2 * Ut; var Ot = 1 + a.eta * Math.cos(a.mo); if (a.delmo = Ot * Ot * Ot, a.sinmao = Math.sin(a.mo), a.x7thm1 = 7 * Ft - 1, 2 * t.pi / a.no >= 225) { a.irez = 0, a.d2201 = 0, a.d2211 = 0, a.d3210 = 0, a.d3222 = 0, a.d4410 = 0, a.d4422 = 0, a.d5220 = 0, a.d5232 = 0, a.d5421 = 0, a.d5433 = 0, a.dedt = 0, a.del1 = 0, a.del2 = 0, a.del3 = 0, a.didt = 0, a.dmdt = 0, a.dnodt = 0, a.domdt = 0, a.e3 = 0, a.ee2 = 0, a.peo = 0, a.pgho = 0, a.pho = 0, a.pinco = 0, a.plo = 0, a.se2 = 0, a.se3 = 0, a.sgh2 = 0, a.sgh3 = 0, a.sgh4 = 0, a.sh2 = 0, a.sh3 = 0, a.si2 = 0, a.si3 = 0, a.sl2 = 0, a.sl3 = 0, a.sl4 = 0, a.gsto = 0, a.xfact = 0, a.xgh2 = 0, a.xgh3 = 0, a.xgh4 = 0, a.xh2 = 0, a.xh3 = 0, a.xi2 = 0, a.xi3 = 0, a.xl2 = 0, a.xl3 = 0, a.xl4 = 0, a.xlamo = 0, a.zmol = 0, a.zmos = 0, a.atime = 0, a.xli = 0, a.xni = 0, a.method = "d", a.isimp = 1, B = 0, w = a.inclo; var St = { epoch: mt, ep: a.ecco, argpp: a.argpo, tc: B, inclp: a.inclo, nodep: a.nodeo, np: a.no, e3: a.e3, ee2: a.ee2, peo: a.peo, pgho: a.pgho, pho: a.pho, pinco: a.pinco, plo: a.plo, se2: a.se2, se3: a.se3, sgh2: a.sgh2, sgh3: a.sgh3, sgh4: a.sgh4, sh2: a.sh2, sh3: a.sh3, si2: a.si2, si3: a.si3, sl2: a.sl2, sl3: a.sl3, sl4: a.sl4, xgh2: a.xgh2, xgh3: a.xgh3, xgh4: a.xgh4, xh2: a.xh2, xh3: a.xh3, xi2: a.xi2, xi3: a.xi3, xl2: a.xl2, xl3: a.xl3, xl4: a.xl4, zmol: a.zmol, zmos: a.zmos }, At = s(St); At.snodm, At.cnodm, d = At.sinim, c = At.cosim, At.sinomm, At.cosomm, At.day, a.e3 = At.e3, a.ee2 = At.ee2, g = At.em, x = At.emsq, At.gam, a.peo = At.peo, a.pgho = At.pgho, a.pho = At.pho, a.pinco = At.pinco, a.plo = At.plo, At.rtemsq, a.se2 = At.se2, a.se3 = At.se3, a.sgh2 = At.sgh2, a.sgh3 = At.sgh3, a.sgh4 = At.sgh4, a.sh2 = At.sh2, a.sh3 = At.sh3, a.si2 = At.si2, a.si3 = At.si3, a.sl2 = At.sl2, a.sl3 = At.sl3, a.sl4 = At.sl4, T = At.s1, E = At.s2, R = At.s3, C = At.s4, I = At.s5, At.s6, At.s7, D = At.ss1, O = At.ss2, S = At.ss3, A = At.ss4, L = At.ss5, At.ss6, At.ss7, Z = At.sz1, At.sz2, G = At.sz3, H = At.sz11, At.sz12, N = At.sz13, Q = At.sz21, At.sz22, Y = At.sz23, $ = At.sz31, At.sz32, _ = At.sz33, a.xgh2 = At.xgh2, a.xgh3 = At.xgh3, a.xgh4 = At.xgh4, a.xh2 = At.xh2, a.xh3 = At.xh3, a.xi2 = At.xi2, a.xi3 = At.xi3, a.xl2 = At.xl2, a.xl3 = At.xl3, a.xl4 = At.xl4, j = At.nm, st = At.z1, At.z2, et = At.z3, nt = At.z11, At.z12, it = At.z13, at = At.z21, At.z22, rt = At.z23, ct = At.z31, At.z32, dt = At.z33, a.zmol = At.zmol, a.zmos = At.zmos; var Lt = { inclo: w, init: a.init, ep: a.ecco, inclp: a.inclo, nodep: a.nodeo, argpp: a.argpo, mp: a.mo, opsmode: a.operationmode }, Zt = o(a, Lt); a.ecco = Zt.ep, a.inclo = Zt.inclp, a.nodeo = Zt.nodep, a.argpo = Zt.argpp, a.mo = Zt.mp, v = 0, y = 0, b = 0; var Gt = { cosim: c, emsq: x, argpo: a.argpo, s1: T, s2: E, s3: R, s4: C, s5: I, sinim: d, ss1: D, ss2: O, ss3: S, ss4: A, ss5: L, sz1: Z, sz3: G, sz11: H, sz13: N, sz21: Q, sz23: Y, sz31: $, sz33: _, t: a.t, tc: B, gsto: a.gsto, mo: a.mo, mdot: a.mdot, no: a.no, nodeo: a.nodeo, nodedot: a.nodedot, xpidot: tt, z1: st, z3: et, z11: nt, z13: it, z21: at, z23: rt, z31: ct, z33: dt, ecco: a.ecco, eccsq: Tt, em: g, argpm: v, inclm: w, mm: b, nm: j, nodem: y, irez: a.irez, atime: a.atime, d2201: a.d2201, d2211: a.d2211, d3210: a.d3210, d3222: a.d3222, d4410: a.d4410, d4422: a.d4422, d5220: a.d5220, d5232: a.d5232, d5421: a.d5421, d5433: a.d5433, dedt: a.dedt, didt: a.didt, dmdt: a.dmdt, dnodt: a.dnodt, domdt: a.domdt, del1: a.del1, del2: a.del2, del3: a.del3, xfact: a.xfact, xlamo: a.xlamo, xli: a.xli, xni: a.xni }, Ht = e(Gt); g = Ht.em, v = Ht.argpm, w = Ht.inclm, b = Ht.mm, j = Ht.nm, y = Ht.nodem, a.irez = Ht.irez, a.atime = Ht.atime, a.d2201 = Ht.d2201, a.d2211 = Ht.d2211, a.d3210 = Ht.d3210, a.d3222 = Ht.d3222, a.d4410 = Ht.d4410, a.d4422 = Ht.d4422, a.d5220 = Ht.d5220, a.d5232 = Ht.d5232, a.d5421 = Ht.d5421, a.d5433 = Ht.d5433, a.dedt = Ht.dedt, a.didt = Ht.didt, a.dmdt = Ht.dmdt, Ht.dndt, a.dnodt = Ht.dnodt, a.domdt = Ht.domdt, a.del1 = Ht.del1, a.del2 = Ht.del2, a.del3 = Ht.del3, a.xfact = Ht.xfact, a.xlamo = Ht.xlamo, a.xli = Ht.xli, a.xni = Ht.xni } 1 !== a.isimp && (h = a.cc1 * a.cc1, a.d2 = 4 * qt * X * h, J = a.d2 * X * a.cc1 / 3, a.d3 = (17 * qt + U) * J, a.d4 = .5 * J * qt * X * (221 * qt + 31 * U) * a.cc1, a.t3cof = a.d2 + 2 * h, a.t4cof = .25 * (3 * a.d3 + a.cc1 * (12 * a.d2 + 10 * h)), a.t5cof = .2 * (3 * a.d4 + 12 * a.cc1 * a.d3 + 6 * a.d2 * a.d2 + 15 * h * (2 * a.d2 + h))) } return i(a, 0), a.init = "n", !0 } }), s("propagate/twoline2satrec", ["../constants", "../gstime/days2mdhms", "../gstime/jday", "../sgp4init"], function (t, o, s, e) { "use strict"; return function (n, i) { var a = 1440 / (2 * t.pi), r = 0, c = {}; c.satnum = n.substring(2, 7), c.epochyr = parseInt(n.substring(18, 20), 10), c.epochdays = parseFloat(n.substring(20, 32)), c.ndot = parseFloat(n.substring(33, 43)), c.nddot = parseFloat("." + parseInt(n.substring(44, 50), 10) + "E" + n.substring(50, 52)), c.bstar = parseFloat(n.substring(53, 54) + "." + parseInt(n.substring(54, 59), 10) + "E" + n.substring(59, 61)), parseInt(n.substring(64, 68), 10), c.inclo = parseFloat(i.substring(8, 16)), c.nodeo = parseFloat(i.substring(17, 25)), c.ecco = parseFloat("." + i.substring(26, 33)), c.argpo = parseFloat(i.substring(34, 42)), c.mo = parseFloat(i.substring(43, 51)), c.no = parseFloat(i.substring(52, 63)), parseFloat(i.substring(63, 68)), c.no = c.no / a, c.a = Math.pow(c.no * t.tumin, -2 / 3), c.ndot = c.ndot / (1440 * a), c.nddot = c.nddot / (1440 * a * 1440), c.inclo = c.inclo * t.deg2rad, c.nodeo = c.nodeo * t.deg2rad, c.argpo = c.argpo * t.deg2rad, c.mo = c.mo * t.deg2rad, c.alta = c.a * (1 + c.ecco) - 1, c.altp = c.a * (1 - c.ecco) - 1, r = c.epochyr < 57 ? c.epochyr + 2e3 : c.epochyr + 1900; var d = o(r, c.epochdays), h = d.mon, p = d.day, m = d.hr, l = d.minute, u = d.sec; c.jdsatepoch = s(r, h, p, m, l, u); var f = { opsmode: "i", satn: c.satnum, epoch: c.jdsatepoch - 2433281.5, xbstar: c.bstar, xecco: c.ecco, xargpo: c.argpo, xinclo: c.inclo, xmo: c.mo, xno: c.no, xnodeo: c.nodeo }; return e(c, f), c } }), s("satellite", ["./constants", "./coordinate-transforms/degrees-lat", "./coordinate-transforms/degrees-long", "./coordinate-transforms/ecf-to-eci", "./coordinate-transforms/ecf-to-look-angles", "./coordinate-transforms/eci-to-ecf", "./coordinate-transforms/eci-to-geodetic", "./coordinate-transforms/geodetic-to-ecf", "./coordinate-transforms/topocentric", "./coordinate-transforms/topocentric-to-look-angles", "./gstime/days2mdhms", "./gstime/gstime", "./gstime/jday", "./propagate/propagate", "./propagate/twoline2satrec", "./sgp4"], function (t, o, s, e, n, i, a, r, c, d, h, p, m, l, u, f) { "use strict"; return { version: "1.0.3", constants: t, degreesLat: o, degreesLong: s, eciToEcf: i, ecfToEci: e, eciToGeodetic: a, ecfToLookAngles: n, geodeticToEcf: r, gstime: p, propagate: l, twoline2satrec: u, sgp4: f } }), o("satellite") });
  </script>
  <script>
    /*
    ==============================
    THIS IS THE satcat-analysis LIBRARY.
    ==============================
    */

    /*
    Copyright (C) 2016-2022 Theodore Kruczek
    All Rights Reserved

    Permission is hereby granted, free of charge, to all military, government,
    and contractors of the:

    6th Space Warning Squadron, located at Cape Cod Space Force Station, MA
    7th Space Warning Squadron, located at Beale Air Force Base, CA
    10th Space Warning Squadron, located at Cavalier Space Force Station, ND
    12th Space Warning Squadron, located at Thule Air Force Base, Greenland
    13th Space Warning Squadron, located at Clear Space Force Station, AK
    16th Space Warning Squadron, located at Eglin Air Force Base, FL
    213th Space Warning Squadron, located at Clear Space Force Station, AK
    RAF Fylingdales, located at Pickering, North Yorkshire, United Kingdom

    obtaining a copy of this software and associated documentation files
    (the "Software"), the rights to use, copy, and modify in perpetuity,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    Distribution of this software to individuals not permanently assigned or
    currently employed at the above listed locations is explicitly forbidden.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    To extend or renew this license, please contact Theodore Kruczek at theodore.kruczek@gmail.com
    */

    function setSensor(sensor) {
      switch (sensor) {
        case 0:// Cod
          setobs({
            lat: 41.754785,
            long: -70.539151,
            hei: 0.060966, // Open Street Maps
            obsminaz: 347,
            obsmaxaz: 227,
            obsminel: 2.9,
            obsmaxel: 85,
            obsminrange: 200,
            obsmaxrange: 5556
          });
          break;
        case 7:// Cod Face A Only
          setobs({
            lat: 41.754785,
            long: -70.539151,
            hei: 0.060966, // Open Street Maps
            obsminaz: 107,
            obsmaxaz: 227,
            obsminel: 2.9,
            obsmaxel: 85,
            obsminrange: 200,
            obsmaxrange: 5556
          });
          break;
        case 8:// Cod Face B Only
          setobs({
            lat: 41.754785,
            long: -70.539151,
            hei: 0.060966, // Open Street Maps
            obsminaz: 347,
            obsmaxaz: 107,
            obsminel: 2.9,
            obsmaxel: 85,
            obsminrange: 200,
            obsmaxrange: 5556
          });
          break;
        case 1:// Clear
          setobs({
            lat: 64.290556,
            long: -149.186944,
            hei: 0.1750, // Open Street Maps
            obsminaz: 184, // 184 -2
            obsmaxaz: 64, // 64 + 2
            obsminel: 2.9, // 3
            obsmaxel: 85,
            obsminrange: 200,
            obsmaxrange: 5556
          });
          break;
        case 2:// Beale
          setobs({
            lat: 39.136064,
            long: -121.351237,
            hei: 0.1120, // Open Street Maps
            obsminaz: 126, // 126 - 2
            obsmaxaz: 6, // 6 + 2
            obsminel: 2.9, // 3
            obsmaxel: 85,
            obsminrange: 200,
            obsmaxrange: 5556
          });
          break;
        case 3:// Cavalier
          setobs({
            lat: 48.724567,
            long: -97.899755,
            hei: 0.3520, // Open Street Maps
            obsminaz: 298, // 298 - 2
            obsmaxaz: 78, // 78 + 2
            obsminel: 1.9, // 1.9
            obsmaxel: 95,
            obsminrange: 200,
            obsmaxrange: 3300 // TODO: Double check this
          });
          break;
        case 4:// Fylingdales
          setobs({
            lat: 54.361758,
            long: -0.670051,
            hei: 0.2600, // Open Street Maps
            obsminaz: 0,
            obsmaxaz: 360,
            obsminel: 2.9, // 3
            obsmaxel: 85,
            obsminrange: 200,
            obsmaxrange: 5556
          });
          break;
        case 5:// Eglin
          setobs({
            lat: 30.572411,
            long: -86.214836,
            hei: 0.0390, // Open Street Maps
            obsminaz: 120, // 120
            obsmaxaz: 242, // 242
            obsminel: 2.9, // 3
            obsmaxel: 105,
            obsminrange: 200,
            obsmaxrange: 60000
          });
          break;
        case 6:// Thule
          setobs({
            lat: 76.570322,
            long: -68.299211,
            hei: 0.3920, // Open Street Maps
            obsminaz: 297, // 297 - 2
            obsmaxaz: 177, // 177 + 2
            obsminel: 2.9, // 3
            obsmaxel: 85,
            obsminrange: 200,
            obsmaxrange: 5556
          });
          break;
      }
      observerGd = {                        // Array to calculate look angles in propagate()
        longitude: longitude * DEG2RAD,
        latitude: latitude * DEG2RAD,
        height: height * 1                  // Converts from string to number TODO: Find correct way to convert string to integer
      };
    }

    var passTicCriteria = 2; // 3 Minute Minimum Time in Coverage
    var farPassCriteria = 2750; // Far Pass Minimum Range
    var elevationCriteria = 4; // Minimum Elevation Criteria

    var TAU = 2 * Math.PI;            // This makes understanding the formulas easier
    var RADIUS_OF_EARTH = 6371;       // Radius of Earth in kilometers
    var RAD2DEG = 360 / TAU;          // Used to convert radians to degrees
    var DEG2RAD = TAU / 360;          // Used to convert degrees to radians
    var MINUTES_PER_DAY = 1440;

    // Start Minify Here
    var elsetInput;
    var numSats;
    var satInfoArray = [];
    var looksArray = [];
    var looksAllArray = [];
    var posneg = [];
    var latitude, longitude, height, obsminaz, obsmaxaz, obsminel, obsmaxel, obsminrange, obsmaxrange;
    var observerGd = {};

    function pad(str, max) {
      return str.length < max ? pad('0' + str, max) : str;
    }
    var objectToCSVRow = function (dataObject) {
      var dataArray = new Array;
      for (var o in dataObject) {
        var innerValue = dataObject[o] === null ? '' : dataObject[o].toString();
        var result = innerValue.replace(/"/g, '""');
        result = '"' + result + '"';
        dataArray.push(result);
      }
      return dataArray.join(',') + '\r\n';
    }

    var exportToCSV = function (arrayOfObjects) {

      if (!arrayOfObjects.length) {
        return;
      }

      var csvContent = "";

      // headers
      csvContent += objectToCSVRow(Object.keys(arrayOfObjects[1]));

      arrayOfObjects.forEach(function (item) {
        csvContent += objectToCSVRow(item);
      });

      var blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });
      saveAs(blob, 'lookAngles.csv')
    }
    function openFile(event) {
      var input = event.target;

      var reader = new FileReader();
      reader.onload = function () {
        elsetInput = reader.result;
        parseElsetInput();
        makeXML();
        var node = document.getElementById('output');
        node.innerText = JSON.stringify(satInfoArray);
        node.innerHTML += '<br><br>';
        node.innerText += JSON.stringify(looksArray);
      };
      reader.readAsText(input.files[0]);

      // Change webpage display from wrap1 to wrap2
      document.getElementById('wrap1').style.display = 'none';
      document.getElementById('wrap2').style.display = 'block';
    }
    function parseElsetInput() {
      var posnegList = document.getElementById('posnegList');
      posnegList = posnegList.value;
      posneg = posnegList.split(',');

      elsetInput = elsetInput.split('\n');
      var filteredElsets = [];
      for (var i = 0; i < elsetInput.length / 2; i++) {
        var tle1 = elsetInput[i * 2];
        var scc = pad(tle1.substr(2, 5).trim(), 5);
        for (var s = 0; s < posneg.length; s++) {
          if (scc === posneg[s]) {
            filteredElsets.push(elsetInput[i * 2]);
            filteredElsets.push(elsetInput[i * 2 + 1]);
          }
        }
      }
      numSats = filteredElsets.length / 2;

      (function parseSatInfo() {
        for (var i = 0; i < numSats; i++) {
          var tle1 = filteredElsets[i * 2];
          var tle2 = filteredElsets[i * 2 + 1];
          var scc = pad(tle1.substr(2, 5).trim(), 5);
          var elsetNum = tle1.substr(64, 4).trim();

          var satrec = satellite.twoline2satrec( // perform and store sat init calcs
            tle1, tle2);
          var inclination = satrec.inclo * RAD2DEG;
          var raan = satrec.nodeo * RAD2DEG;
          var eccentricity = satrec.ecco;
          var meanMotion = satrec.no * 60 * 24 / TAU; // convert rads/minute to rev/day
          var semiMajorAxis = Math.pow(8681663.653 / meanMotion, (2 / 3));
          var apogee = semiMajorAxis * (1 + eccentricity) - RADIUS_OF_EARTH;
          var perigee = semiMajorAxis * (1 - eccentricity) - RADIUS_OF_EARTH;
          var period = MINUTES_PER_DAY / meanMotion;

          satInfoArray.push({
            satno: scc,
            inc: inclination,
            raan: raan,
            e: eccentricity,
            meanmo: meanMotion,
            apogee: apogee,
            perigee: perigee,
            period: period,
            elset: elsetNum
          });
        }
        satInfoArray.sort(function (a, b) { return a.satno - b.satno; });
      })();

      (function parseLooks() {
        for (var i = 0; i < numSats; i++) {
          var tle1 = filteredElsets[i * 2];
          var tle2 = filteredElsets[i * 2 + 1];
          getlookangles(tle1, tle2);
        }
        looksArray.sort(function (a, b) { return a.time - b.time; });
        looksAllArray.sort(function (a, b) { return a.time - b.time; });
      })();
    }
    function makeXML() {
      var xml = document.createElement('xml');
      var xmlRoot = document.createElement('xmlRoot');
      xml.appendChild(xmlRoot);

      (function satInfoXML() {
        var satinfo = document.createElement('satinfo');
        for (var i = 0; i < satInfoArray.length; i++) {
          var sat = document.createElement('sat');

          var satno = document.createElement('satno');
          var satnoText = document.createTextNode(satInfoArray[i].satno);
          satno.appendChild(satnoText);

          var inc = document.createElement('inc');
          var incText = document.createTextNode(satInfoArray[i].inc);
          inc.appendChild(incText);

          var raan = document.createElement('raan');
          var raanText = document.createTextNode(satInfoArray[i].raan);
          raan.appendChild(raanText);

          var e = document.createElement('e');
          var eText = document.createTextNode(satInfoArray[i].e);
          e.appendChild(eText);

          var apogee = document.createElement('apogee');
          var apogeeText = document.createTextNode(satInfoArray[i].apogee);
          apogee.appendChild(apogeeText);

          var perigee = document.createElement('perigee');
          var perigeeText = document.createTextNode(satInfoArray[i].perigee);
          perigee.appendChild(perigeeText);

          var meanmo = document.createElement('meanmo');
          var meanmoText = document.createTextNode(satInfoArray[i].meanmo);
          meanmo.appendChild(meanmoText);

          var period = document.createElement('period');
          var periodText = document.createTextNode(satInfoArray[i].period);
          period.appendChild(periodText);

          var elset = document.createElement('elset');
          var elsetText = document.createTextNode(satInfoArray[i].elset);
          elset.appendChild(elsetText);

          sat.appendChild(satno);
          sat.appendChild(inc);
          sat.appendChild(e);
          sat.appendChild(raan);
          sat.appendChild(apogee);
          sat.appendChild(perigee);
          sat.appendChild(meanmo);
          sat.appendChild(period);
          sat.appendChild(elset);
          satinfo.appendChild(sat);
        }
        xmlRoot.appendChild(satinfo);
      })();

      // Used to show in coverage looks
      (function looksXML() {
        var looks = document.createElement('looks');
        for (var i = 0; i < looksArray.length; i++) {
          var pass = document.createElement('pass');

          var satno2 = document.createElement('satno2');
          var satnoText = document.createTextNode(looksArray[i].scc);
          satno2.appendChild(satnoText);

          var time = document.createElement('time');
          var timeText = document.createTextNode(looksArray[i].time);
          time.appendChild(timeText);

          var unix = document.createElement('unix');
          var unixText = document.createTextNode(looksArray[i].unix);
          unix.appendChild(unixText);

          var az = document.createElement('az');
          var azText = document.createTextNode(looksArray[i].az);
          az.appendChild(azText);

          var el = document.createElement('el');
          var elText = document.createTextNode(looksArray[i].el);
          el.appendChild(elText);

          var rng = document.createElement('rng');
          var rngText = document.createTextNode(looksArray[i].rng);
          rng.appendChild(rngText);

          var tic = document.createElement('tic');
          var ticText = document.createTextNode(looksArray[i].tic);
          tic.appendChild(ticText);

          var isTwoFace = document.createElement('isTwoFace');
          var isTwoFaceText = document.createTextNode(looksArray[i].isTwoFace);
          isTwoFace.appendChild(isTwoFaceText);

          var rise = document.createElement('rise');
          var riseText = document.createTextNode(looksArray[i].rise);
          rise.appendChild(riseText);

          var margF = document.createElement('margF');
          var margFText = document.createTextNode(looksArray[i].margFast);
          margF.appendChild(margFText);

          var margE = document.createElement('margE');
          var margEText = document.createTextNode(looksArray[i].margEl);
          margE.appendChild(margEText);

          var margT = document.createElement('margT');
          var margTText = document.createTextNode(looksArray[i].margTIC);
          margT.appendChild(margTText);

          var farP = document.createElement('farP');
          var farPText = document.createTextNode(looksArray[i].farPass);
          farP.appendChild(farPText);

          var fenceT = document.createElement('fenceT');
          var fenceTText = document.createTextNode(looksArray[i].fenceType);
          fenceT.appendChild(fenceTText);

          var nkFence = document.createElement('nkFence');
          var nkFenceText = document.createTextNode(looksArray[i].notKeyed);
          nkFence.appendChild(nkFenceText);

          pass.appendChild(satno2);
          pass.appendChild(time);
          pass.appendChild(unix);
          pass.appendChild(az);
          pass.appendChild(el);
          pass.appendChild(rng);
          pass.appendChild(isTwoFace);
          pass.appendChild(rise);
          pass.appendChild(tic);
          pass.appendChild(margF);
          pass.appendChild(margE);
          pass.appendChild(margT);
          pass.appendChild(farP);
          pass.appendChild(fenceT);
          pass.appendChild(nkFence);
          looks.appendChild(pass);
        }
        xmlRoot.appendChild(looks);
      })();

      // Used to show all looks, not just those in coverage
      (function looksAllXML() {
        var looksAll = document.createElement('looksAll');
        for (var i = 0; i < looksAllArray.length; i++) {
          var pass = document.createElement('pass');

          var satno3 = document.createElement('satno3');
          var satnoText = document.createTextNode(looksAllArray[i].scc);
          satno3.appendChild(satnoText);

          var time = document.createElement('time');
          var timeText = document.createTextNode(looksAllArray[i].time);
          time.appendChild(timeText);

          var unix = document.createElement('unix');
          var unixText = document.createTextNode(looksAllArray[i].unix);
          unix.appendChild(unixText);

          var az = document.createElement('az');
          var azText = document.createTextNode(looksAllArray[i].az);
          az.appendChild(azText);

          var el = document.createElement('el');
          var elText = document.createTextNode(looksAllArray[i].el);
          el.appendChild(elText);

          var rng = document.createElement('rng');
          var rngText = document.createTextNode(looksAllArray[i].rng);
          rng.appendChild(rngText);

          pass.appendChild(satno3);
          pass.appendChild(time);
          pass.appendChild(unix);
          pass.appendChild(az);
          pass.appendChild(el);
          pass.appendChild(rng);
          looksAll.appendChild(pass);
        }

        xmlRoot.appendChild(looksAll);
      })();

      // Change webpage display from wrap2 to wrap3
      document.getElementById('wrap2').style.display = 'none';
      document.getElementById('wrap3').style.display = 'block';

      var blob = new Blob([xml.innerHTML], { type: 'text/plain;charset=utf-8' });
      var today = new Date();
      var year = today.getUTCFullYear();
      var start = new Date(today.getFullYear(), 0, 0);
      var diff = today - start;
      var oneDay = 1000 * 60 * 60 * 24;
      var day = Math.floor(diff / oneDay);
      var hour = today.getUTCHours();
      saveAs(blob, 'SatLooks_' + year.toString() + '_' + day.toString() + '_' + hour.toString() + '.xml');
      // Only in the CSV version
      // exportToCSV(looksArray);
    }
    function getlookangles(tle1, tle2) {
      // Load Sensor Parameters
      var sensor = document.getElementById('selectSensor');
      sensor = parseInt(sensor.options[sensor.selectedIndex].value);
      setSensor(sensor);

      // Get orbital parameters using satellite.js
      var satrec = satellite.twoline2satrec(tle1, tle2);

      // Don't Propagate The Unseeable
      var eccentricity = satrec.ecco;
      var meanMotion = satrec.no * 60 * 24 / TAU; // convert rads/minute to rev/day
      var semiMajorAxis = Math.pow(8681663.653 / meanMotion, (2 / 3));
      var perigee = semiMajorAxis * (1 - eccentricity) - RADIUS_OF_EARTH;
      if (perigee > obsmaxrange) return;

      // Get NORAD Id number from TLE1
      satrec.satnum = pad(tle1.substr(2, 5).trim(), 5);

      // Set interval in seconds for each recorded pass time/location
      var lookanglesInterval = 5;

      // Initialize variable to store number of pass time/locations for this satellite
      var tblLength = 0;

      // Setup flags for passes
      var margFast = false; // False unless range <= 750 detected
      var notKeyed = false; // False unless first look is > 3 degrees
      var margTIC = false // False initially and checked at end to confirm pass was > 2 minutes
      var margEL = true; // True initially unless some part of the pass is > 4 degrees elevation
      var farPass = false; // False initially and checked at end to confirm pass wasn't always at a long range
      var passStartTime; // This is set in the propagate function on first valid look
      var passMinRange = obsmaxrange; // This is set each look to find minimum range (start at max range)
      var fenceType = 1; // NK fence horizontal or vertical? 0 = Horz 1 = Vert

      var orbitalPeriod = MINUTES_PER_DAY / (satrec.no * MINUTES_PER_DAY / TAU); // Seconds in a day divided by mean motion

      // Loop starting with offset=0 for 2 days at X second interval
      let isLastPassInView = false;
      for (var propTempOffset = 0; propTempOffset < (2 * 24 * 60 * 60); propTempOffset += lookanglesInterval) {
        // Pass propTempOffset in milliseconds
        let isCurPassInView = propagate((propTempOffset), satrec);   // Update the table with looks for this 5 second chunk
        if (isLastPassInView && !isCurPassInView) {
          propTempOffset += 4 * orbitalPeriod / 5 * 60; // add 4/5th a period in seconds
        }
      }
      function propagate(curPropOffset, satrec) {
        var now = propTime(curPropOffset * 1000, Date.now()); // Set "now" to now + the offset in milliseconds
        var isInView = false; // In FOV Flag
        var scc = satrec.satnum;
        var j = jday(now.getUTCFullYear(),
          now.getUTCMonth() + 1, // NOTE:, this function requires months in range 1-12.
          now.getUTCDate(),
          now.getUTCHours(),
          now.getUTCMinutes(),
          now.getUTCSeconds()); // Converts time to jday (TLEs use epoch year/day)
        j += now.getUTCMilliseconds() * 1.15741e-8; // days per millisecond
        var gmst = satellite.gstime(j);

        var m = (j - satrec.jdsatepoch) * MINUTES_PER_DAY; // 1440 = minutes_per_day
        var pv = satellite.sgp4(satrec, m);
        var positionEcf, lookAngles, azimuth, elevation, rangeSat;

        // This prevents bad pv.position from crashing everything
        if (typeof pv.position == 'undefined') return true;

        positionEcf = satellite.eciToEcf(pv.position, gmst); // pv.position is called positionEci originally
        lookAngles = satellite.ecfToLookAngles(observerGd, positionEcf);
        azimuth = lookAngles.azimuth * RAD2DEG;
        elevation = lookAngles.elevation * RAD2DEG;
        rangeSat = lookAngles.rangeSat;

        // Calculate if in view (Some sensors "min" is bigger than "max")
        if (obsminaz > obsmaxaz) {
          if ((azimuth >= obsminaz || azimuth <= obsmaxaz) && (elevation >= obsminel && elevation <= obsmaxel) && (rangeSat <= obsmaxrange && rangeSat >= obsminrange)) {
            isInView = true;
          } else {
            isInView = false;
          }
        } else {
          if ((azimuth >= obsminaz && azimuth <= obsmaxaz) && (elevation >= obsminel && elevation <= obsmaxel) && (rangeSat <= obsmaxrange && rangeSat >= obsminrange)) {
            isInView = true;
          } else {
            isInView = false;
          }
        }
        if (!isInView) {
          // If not in view then there is nothing left to do
          if (elevation < 0) {
            // If elevation is negative then it is below the horizon
            return false;
          } else {
            // If elevation is positive then it is above the horizon
            return true;
          }
        }
        // If it is in view...
        if (isInView) {
          // If in coverage, then check to see if it was in
          // coverage 5 seconds ago, otherwise this is the first
          // line of coverage

          // Calculate Position 5 seconds ago in eci
          var now1 = propTime(0 - (5 * 1000), now);
          var j1 = jday(now1.getUTCFullYear(),
            now1.getUTCMonth() + 1, // this function requires months in range 1-12 not 0-11
            now1.getUTCDate(),
            now1.getUTCHours(),
            now1.getUTCMinutes(),
            now1.getUTCSeconds()); // Converts time to jday (TLEs use epoch year/day)
          j1 += now1.getUTCMilliseconds() * 1.15741e-8; // days per millisecond
          var gmst1 = satellite.gstime(j1);
          var m1 = (j1 - satrec.jdsatepoch) * MINUTES_PER_DAY; // 1440 = MINUTES_PER_DAY
          var pv1 = satellite.sgp4(satrec, m1);
          var positionEcf1, lookAngles1, azimuth1, elevation1, rangeSat1;

          // if position failed then quit this function
          if (typeof pv1.position == 'undefined') return true;

          positionEcf1 = satellite.eciToEcf(pv1.position, gmst1); // eci coords to ecf at gmst1 time
          lookAngles1 = satellite.ecfToLookAngles(observerGd, positionEcf1); // look angles from ecf
          // rename/convert variables to make this easier to read
          azimuth1 = lookAngles1.azimuth * RAD2DEG;
          elevation1 = lookAngles1.elevation * RAD2DEG;
          rangeSat1 = lookAngles1.rangeSat;


          // Calculate if it was in view (Some sensors "min" is bigger than "max")
          if (obsminaz > obsmaxaz) {
            if ((azimuth1 >= obsminaz || azimuth1 <= obsmaxaz) && (elevation1 >= obsminel && elevation1 <= obsmaxel) && (rangeSat1 <= obsmaxrange && rangeSat1 >= obsminrange)) {
              isInView1 = true;
            } else {
              isInView1 = false;
            }
          } else {
            if ((azimuth1 >= obsminaz && azimuth1 <= obsmaxaz) && (elevation1 >= obsminel && elevation1 <= obsmaxel) && (rangeSat1 <= obsmaxrange && rangeSat1 >= obsminrange)) {
              isInView1 = true;
            } else {
              isInView1 = false;
            }
          }
          // if it wasn't in view...
          if (!isInView1) {
            // and it is in view at or below 3, then it is initially marginal for elevation
            if (elevation <= elevationCriteria) margEL = true;

            // if it starts above 3 degrees then it is over the shoulder
            if (elevation > 3) {
              notKeyed = true;
              fenceType = 0;
            }

            passStartTime = now;

            // Was the last pass less than half a period ago?
            const isTwoFace = (looksArray[looksArray.length - 1]?.unix > new Date(now).getTime() / 1000 - (orbitalPeriod / 2));

            looksArray.push({
              scc: scc,
              time: now.toISOString(),
              unix: new Date(now).getTime() / 1000,
              az: azimuth.toFixed(0),
              el: elevation.toFixed(1),
              rng: rangeSat.toFixed(0),
              isTwoFace: isTwoFace,
              rise: 0
            });
          } else {
            // If it was in coverage, then check to see if it will be in
            // coverage in 5 seconds, otherwise that was the last
            // line of coverage
            now1 = propTime(0 + (5 * 1000), now); // 5 second looks
            j1 = jday(now1.getUTCFullYear(),
              now1.getUTCMonth() + 1, // this function requires months in range 1-12 not 0-11
              now1.getUTCDate(),
              now1.getUTCHours(),
              now1.getUTCMinutes(),
              now1.getUTCSeconds()); // Converts time to jday (TLEs use epoch year/day)
            j1 += now1.getUTCMilliseconds() * 1.15741e-8; // days per millisecond
            gmst1 = satellite.gstime(j1);

            m1 = (j1 - satrec.jdsatepoch) * MINUTES_PER_DAY; // 1440 = minutes_per_day
            pv1 = satellite.sgp4(satrec, m1);

            if (typeof pv1.position == 'undefined') return;
            positionEcf1 = satellite.eciToEcf(pv1.position, gmst1); // pv.position is called positionEci originally
            lookAngles1 = satellite.ecfToLookAngles(observerGd, positionEcf1);
            azimuth1 = lookAngles1.azimuth * RAD2DEG;
            elevation1 = lookAngles1.elevation * RAD2DEG;
            rangeSat1 = lookAngles1.rangeSat;
            if (obsminaz > obsmaxaz) {
              if ((azimuth1 >= obsminaz || azimuth1 <= obsmaxaz) && (elevation1 >= obsminel && elevation1 <= obsmaxel) && (rangeSat1 <= obsmaxrange && rangeSat1 >= obsminrange)) {
                isInView1 = true;
              } else {
                isInView1 = false;
              }
            } else {
              if ((azimuth1 >= obsminaz && azimuth1 <= obsmaxaz) && (elevation1 >= obsminel && elevation1 <= obsmaxel) && (rangeSat1 <= obsmaxrange && rangeSat1 >= obsminrange)) {
                isInView1 = true;
              } else {
                isInView1 = false;
              }
            }
            if (!isInView1) {
              // Check for possible marginal for timeout
              // using 3 minutes because FOV is expanded
              if (now - passStartTime < passTicCriteria * 60 * 1000) margTIC = true;
              if (passMinRange >= farPassCriteria) farPass = true;
              // if it ends above 3 degrees then it comes towards the radar
              if (elevation > 3.5) { // Changed to 3.5 from 3 to allow for some margin
                margFast = true; // New Definition of FastSat
                fenceType = 0;
              }
              looksArray.push({
                scc: scc,
                time: now.toISOString(),
                unix: new Date(now).getTime() / 1000,
                az: azimuth.toFixed(0),
                el: elevation.toFixed(1),
                rng: rangeSat.toFixed(0),
                tic: (now - passStartTime) / 1000,
                rise: 1,
                margFast: margFast,
                margEl: margEL,
                margTIC: margTIC,
                farPass: farPass,
                fenceType: fenceType,
                notKeyed: notKeyed
              });
              // Reset flags for passes
              margFast = false; // False unless range <= 750 detected
              notKeyed = false; // False unless first look is > 3 degrees
              margTIC = false // False initially and checked at end to confirm pass was > 2 minutes
              margEL = true; // True initially unless some part of the pass is > 4 degrees elevation
              farPass = false; // False initially and checked at end to confirm pass wasn't always at a long range
              passMinRange = obsmaxrange; // This is set each look to find minimum range
              fenceType = 1; // NK fence horizontal or vertical? 0 = Horz 1 = Vert
              if (elevation < 0) {
                // If elevation is negative then it is below the horizon
                return false;
              } else {
                // If elevation is positive then it is above the horizon
                return true;
              };
            }
          }
          // Do this for any pass in coverage
          // if (rangeSat <= 750) margFast = true; // Old Definition of FastSat
          if (elevation > 4) margEL = false;
          if (passMinRange > rangeSat) passMinRange = rangeSat;
          looksAllArray.push({
            scc: scc,
            time: now.toISOString(),
            unix: new Date(now).getTime() / 1000,
            az: azimuth.toFixed(0),
            el: elevation.toFixed(1),
            rng: rangeSat.toFixed(0)
          });
        }
      }
      function propTime(propOffset2, propRealTime) {
        'use strict';                                             // May be unnescessary but doesn't hurt anything atm.
        var now = new Date();                                     // Make a time variable
        now.setTime(Number(propRealTime) + propOffset2);           // Set the time variable to the time in the future
        return now;
      }
      function jday(year, mon, day, hr, minute, sec) { // from satellite.js
        'use strict';
        return (367.0 * year -
          Math.floor((7 * (year + Math.floor((mon + 9) / 12.0))) * 0.25) +
          Math.floor(275 * mon / 9.0) +
          day + 1721013.5 +
          ((sec / 60.0 + minute) / 60.0 + hr) / 24.0  //  ut in days
        );
      }
    }
    function setobs(obs) {
      // Set the Observer Location and variable to convert to RADIANS TODO: Change these to variables received in a method call.
      latitude = obs.lat;                   // Observer Lattitude - use Google Maps
      longitude = obs.long;                 // Observer Longitude - use Google Maps
      height = obs.hei;                     // Observer Height in Km
      obsminaz = obs.obsminaz;              // Observer min azimuth (satellite azimuth must be greater) left extent looking towards target
      obsmaxaz = obs.obsmaxaz;              // Observer max azimuth (satellite azimuth must be smaller) right extent looking towards target
      obsminel = obs.obsminel;              // Observer min elevation
      obsmaxel = obs.obsmaxel;              // Observer max elevation TODO: Determine if radars with 105deg elevation work correctly
      obsminrange = obs.obsminrange;        // Observer min range TODO: Determine how to calculate min range with transmit cycle information
      obsmaxrange = obs.obsmaxrange;        // Observer max range TODO: Determine how to calculate max range with transmit cycle information
      observerGd = {                        // Array to calculate look angles in propagate()
        longitude: longitude * DEG2RAD,
        latitude: latitude * DEG2RAD,
        height: height * 1                  // Converts from string to number TODO: Find correct way to convert string to integer
      };
    }
  </script>
  <title>DARTS Look Angle Tool</title>
  <style>
    body {
      font-family: "Segoe UI Light, Arial, Sans-Serif";
      margin: 0;
      padding: 0;
      height: 100%;
      width: 100%;
      background-color: #003655;
    }

    #header {
      background: #002439;
      margin: 0;
      padding: 0 1em;
      height: 5em;
      width: 100%;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 1;
      box-shadow: 0 0 5px #000;
    }

    #header h1 {
      color: white;
      font-weight: 400;
      font-size: 2.125em;
      font-family: "Segoe UI Light", Arial, Sans-Serif;
    }

    #content {
      color: white;
      background-color: #003655;
      margin: 0;
      padding: 0;
      position: absolute;
      top: 5em;
      left: 0;
      padding-left: 1em;
      padding-right: 1em;
      font-family: "Segoe UI", Arial, Sans-Serif;
    }

    .row {
      display: flex;
      flex-direction: row;
      justify-content: flex-start;
      align-items: center;
      width: 100%;
    }

    .row p {
      width: 450px;
      margin-right: 100px;
    }

    #wrap1 {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: flex-start;
      height: 100%;
      width: 100%;
    }

    #footer {
      position: fixed;
      left: 0;
      bottom: 0;
      width: 100%;
      text-align: center;
      font-size: 1em;
      color: #fff;
      font-family: "Segoe UI Light", Arial, Sans-Serif;
    }

    #wrap2,
    #wrap3,
    #output {
      display: none;
    }

    #wrap2 {
      text-align: center;
    }
  </style>
</head>

<body onload="window.resizeTo(845,600);">
  <div id="header">
    <h1>DARTS - LOOK ANGLE TOOL</h1>
  </div>
  <div id="content">
    <div id="wrap1">
      <div id="sensor" class="row">
        <p>Select your sensor.</p>
        <select id="selectSensor" name="Sensor">
          <option value="0">Cape Cod</option>
          <option value="7">Cape Cod Face A Only</option>
          <option value="8">Cape Cod Face B Only</option>
          <option value="1">Clear</option>
          <option value="2">Beale</option>
          <option value="3">Cavalier</option>
          <option value="4">Fylingdales</option>
          <option value="5">Eglin</option>
          <option value="6">Thule</option>
        </select>
      </div>
      <div id="posneg" class="row">
        <p>
          Enter all tasked objects, spearated by commas - <b>NO SPACES</b>
          <br />
          <br />
          Follow Step 2 on DARTS - UPDATE POSNEG to copy all current taskings.
        </p>
        <input id="posnegList" type="text" name="fname"><br>
      </div>
      <div id="selectFile" class="row">
        <p>
          Select the most recent Satellite Catalog file.
          </br /> File Located at ..\DARTS\posneg\elsets.
        </p>
        <input type='file' accept='text/plain' onchange='openFile(event)'><br>
      </div>
    </div>
    <div id="wrap2">
      <div>
        <h1>Please Wait...</h1>
        <p>This may take from 1 to 10 minutes, <br />
          depending on the size of the tasking list and the speed of your computer.</p>
        <div id='output'></div>
      </div>
    </div>
    <div id="wrap3">
      <div id="saveas">
        <p> Save file in ..\DARTS\posneg\satlooks\ folder.<br />Click the arrow next to "Save" on the popup and select
          "Save As".<br />Locate the file and click save.</p>
      </div>
      <div id="close">
        <p>Click "Close" and return to DARTS.
          <button onclick="self.close()">Close</button>
        </p>
      </div>
    </div>
    <div id="footer">
      <p>
        Copyright (C) 2016-2022 Theodore Kruczek<br />
        theodore.kruczek@gmail.com
      </p>
    </div>
</body>

</html>